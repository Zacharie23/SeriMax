let pageActuelle = 1;
const itemsParPage = 10;
let currentData = [];
let recherche = "";

const dataSeries = [
  {
    titre: "Prison Break",
    description: "Un fr√®re arrive en prison pour sauver son fr√®re",
  },
  {
    titre: "Breaking Bad",
    description: "Un prof de chimie devient criminel",
  },
  {
    titre: "Alice in Borderland",
    description:
      "Arisu et ses amis se pr√©cipitent dans les toilettes publiques pour se cacher de la police. Lorsqu'ils en ressortent, les rues de Tokyo sont vides.",
  },
  {
    titre: "Outer Banks",
    description:
      "Un adolescent demande √† ses trois meilleurs amis de partir √† la recherche d'un tr√©sor l√©gendaire li√© √† la disparition de son p√®re. Cependant, cette aventure s'av√®re √™tre un danger pour toutes les personnes impliqu√©es.",
  },
  {
    titre: "Biohackers",
    description:
      "Mia est √©tudiante en m√©decine. Elle d√©couvre l'utilisation de la technologie de pointe du bio-piratage au sein de son universit√©. Lorsqu'une d√©couverte r√©volutionnaire tombe entre de mauvaises mains, Mia doit d√©cider de quel c√¥t√© elle souhaite √™tre.",
  },
  {
    titre: "Stranger Things",
    description:
      "En 1983, √† Hawkins dans l'Indiana, Will Byers dispara√Æt de son domicile. Ses amis se lancent alors dans une recherche sem√©e d'emb√ªches pour le retrouver. Pendant leur qu√™te, les gar√ßons rencontrent une √©trange jeune fille en fuite.",
  },
  {
    titre: "Scontrole Z",
    description:
      "Apr√®s qu'un pirate informatique ait commenc√© √† exposer les secrets des √©l√®ves du Coll√®ge national devant toute l'√©cole, la distante et observatrice Sofia se lance dans la d√©couverte de son identit√©.",
  },
  {
    titre: "The I-Land",
    description:
      "Dix inconnus se r√©veillent sur une √Æle d√©serte dangereuse sans aucun souvenir de qui ils sont ni comment ils sont arriv√©s, et d√©couvrent bient√¥t sur l'√Æle que tout n'est pas comme il semble.",
  },
  {
    titre: "The Walking Dead",
    description:
      "Apr√®s une apocalypse ayant transform√© la quasi-totalit√© de la population en zombies, un groupe men√© par Rick Grimes tente de survivre. Ensemble, ils vont devoir faire face √† ce nouveau monde.",
  },
  {
    titre: "Manifest",
    description:
      "Lorsque le vol Montego 828 atterrit √† New York, ses passagers apprennent qu'ils ont fait un bond de 5 ans dans le futur, et que tous les croyaient morts.",
  },
  {
    titre: "Narcos",
    description:
      "Inspir√©e de l'histoire du narcotrafiquant Pablo Escobar, cette s√©rie raconte la guerre sanglante des cartels en Colombie.",
  },
];

const dataFilms = [
  {
    titre: "Ready Player One",
    description:
      "Dans un monde d√©vast√©, un jeune gamer talentueux se lance dans une comp√©tition plan√©taire. L'enjeu ? L'h√©ritage d'un tr√©sor et d'un immense univers de r√©alit√© virtuelle.",
  },
  {
    titre: "Captain America",
    description:
      "Steve Rogers participe √† un projet de recherche top secret qui le transforme en Captain America.",
  },
  {
    titre: "Adam √† travers le temps",
    description:
      "Apr√®s un atterrissage forc√© en 2022, le pilote de chasse et voyageur dans le temps Adam Reed fait √©quipe avec une version de lui-m√™me √¢g√©e de 12 ans pour sauver le futur.",
  },
  {
    titre: "Passengers",
    description:
      "Alors que 5 000 passagers endormis voyagent vers une nouvelle plan√®te, deux d'entre eux sont tir√©s de leur sommeil artificiel 90 ans trop t√¥t. Ils doivent maintenant affronter un danger pour tout le monde √† bord.",
  },
  {
    titre: "Iron Man",
    description:
      "L'homme d'affaires Tony Stark d√©cide de d√©fendre le monde sous le nom d'Iron Man.",
  },
  {
    titre: "Oxyg√®ne",
    description:
      "Enferm√©e dans une unit√© cryog√©nique, Liz tente d√©sesp√©r√©ment de se souvenir de son identit√© et de s'√©chapper avant d'√™tre √† court d'oxyg√®ne.",
  },
];

// Initialisation de la page d'accueil avec m√©lange films + s√©ries
function afficheAccueil() {
  const catalogue = document.getElementById("catalogue");
  catalogue.style.display = "block";

  // M√©lange films + s√©ries
  const tousLesContenus = [...dataSeries, ...dataFilms];
  tousLesContenus.sort(() => Math.random() - 0.5);

  currentData = tousLesContenus;
  pageActuelle = 1;
  afficheCatalogue(tousLesContenus);
}

// Affiche le catalogue avec pagination
function afficheCatalogue(series) {
  const catalogue = document.getElementById("catalogue");
  catalogue.innerHTML = "";

  const debut = (pageActuelle - 1) * itemsParPage;
  const fin = debut + itemsParPage;
  const pageItems = series.slice(debut, fin);

  pageItems.forEach((contenu) => {
    const card = document.createElement("div");
    card.classList.add("serie-card");

    const titre = document.createElement("h3");
    titre.textContent = contenu.titre || contenu.Title || "Titre inconnu";

    const description = document.createElement("p");
    description.textContent = contenu.description || contenu.Plot || "Pas de description.";

    // Bouton voir d√©tails
    const buttonVoir = document.createElement("button");
    buttonVoir.textContent = "Voir";

    // Bouton favori
    const btnFavori = document.createElement("button");
    btnFavori.classList.add("btn-favori");

    // Ici, favorisUtilisateur doit √™tre un tableau inject√© c√¥t√© PHP, sinon []
    const estFavori = typeof favorisUtilisateur !== "undefined" && favorisUtilisateur.includes(contenu.imdbID || contenu.imdb_id || "");
    btnFavori.textContent = estFavori ? "‚ù§Ô∏è" : "ü§ç";
    btnFavori.dataset.imdbid = contenu.imdbID || contenu.imdb_id || "";

    btnFavori.addEventListener("click", () => {
      const imdbID = btnFavori.dataset.imdbid;
      fetch("toggle_favori.php", {
        method: "POST",
        headers: { "Content-Type": "application/x-www-form-urlencoded" },
        body: "imdbID=" + encodeURIComponent(imdbID),
      })
        .then((res) => res.text())
        .then((response) => {
          btnFavori.textContent = btnFavori.textContent === "ü§ç" ? "‚ù§Ô∏è" : "ü§ç";
          alert(response);
        })
        .catch(console.error);
    });

    card.appendChild(titre);
    card.appendChild(description);
    card.appendChild(buttonVoir);
    card.appendChild(btnFavori);

    catalogue.appendChild(card);

    buttonVoir.addEventListener("click", () => {
      if (contenu.imdbID) {
        fetch(`https://www.omdbapi.com/?apikey=47fd8d36&i=${contenu.imdbID}`)
          .then((res) => res.json())
          .then((details) => ouvrirModal(details));
      } else {
        ouvrirModal(contenu);
      }
    });
  });

  affichePagination(series.length);
}

// Pagination
function affichePagination(tailleTotale) {
  const pagination = document.getElementById("pagination");
  pagination.innerHTML = "";

  const totalPages = Math.ceil(tailleTotale / itemsParPage);

  const btnPrev = document.createElement("button");
  btnPrev.textContent = "Pr√©c√©dent";
  btnPrev.disabled = pageActuelle === 1;
  btnPrev.addEventListener("click", () => {
    if (pageActuelle > 1) {
      pageActuelle--;
      afficheCatalogue(currentData);
    }
  });
  pagination.appendChild(btnPrev);

  for (let i = 1; i <= totalPages; i++) {
    const btn = document.createElement("button");
    btn.textContent = i;
    if (i === pageActuelle) {
      btn.style.backgroundColor = "#a84dff";
      btn.style.color = "#1a1026";
      btn.style.fontWeight = "bold";
    }
    btn.addEventListener("click", () => {
      pageActuelle = i;
      afficheCatalogue(currentData);
    });
    pagination.appendChild(btn);
  }

  const btnNext = document.createElement("button");
  btnNext.textContent = "Suivant";
  btnNext.disabled = pageActuelle === totalPages;
  btnNext.addEventListener("click", () => {
    if (pageActuelle < totalPages) {
      pageActuelle++;
      afficheCatalogue(currentData);
    }
  });
  pagination.appendChild(btnNext);
}

// Modale d√©tails
function ouvrirModal(contenu) {
  const modal = document.getElementById("modal");

  const favoriBtnHTML = contenu.imdbID
    ? `<button id="favori-btn" data-imdbid="${contenu.imdbID}">Ajouter aux favoris</button>`
    : "";

  modal.innerHTML = `
    <div class="modal-content">
      <h2>${contenu.Title || contenu.titre}</h2>
      <p><strong>Ann√©e :</strong> ${contenu.Year || ""}</p>
      <p><strong>Dur√©e :</strong> ${contenu.Runtime || "?"}</p>
      <p><strong>Genre :</strong> ${contenu.Genre || "?"}</p>
      <p><strong>Acteurs :</strong> ${contenu.Actors || "?"}</p>
      <p><strong>Synopsis :</strong> ${contenu.Plot || contenu.description || "Aucune description"}</p>
      ${favoriBtnHTML}
      <button id="fermer">Fermer</button>
    </div>
  `;

  modal.style.display = "flex";

  const favButton = document.getElementById("favori-btn");
  if (favButton) {
    if (typeof userIsLoggedIn !== "undefined" && userIsLoggedIn) {
      favButton.style.display = "inline-block";
      favButton.addEventListener("click", () => {
        const imdbID = favButton.dataset.imdbid;
        fetch("ajouter_favori.php", {
          method: "POST",
          headers: { "Content-Type": "application/x-www-form-urlencoded" },
          body: "imdbID=" + encodeURIComponent(imdbID),
        })
          .then((response) => response.text())
          .then((resultat) => alert(resultat))
          .catch((error) => console.error("Erreur :", error));
      });
    } else {
      favButton.style.display = "none";
    }
  }

  document.getElementById("fermer").addEventListener("click", fermerModal);
}

function fermerModal() {
  const modal = document.getElementById("modal");
  modal.style.display = "none";
  modal.innerHTML = "";
}

// Ferme modale si clic hors contenu
window.addEventListener("click", (e) => {
  const modal = document.getElementById("modal");
  if (e.target === modal) {
    fermerModal();
  }
});

// Recherche dans catalogue local (films ou s√©ries)
const champRecherche = document.getElementById("recherche");

champRecherche.addEventListener("input", () => {
  pageActuelle = 1;
  lancerRecherche(champRecherche.value);
});

function lancerRecherche(texteRecherche) {
  if (texteRecherche.length < 3) return;

  const type = document.getElementById("filtreType").value;
  const annee = document.getElementById("filtreAnnee").value;

  let url = `https://www.omdbapi.com/?apikey=47fd8d36&s=${encodeURIComponent(texteRecherche)}&page=${pageActuelle}`;

  if (type !== "all") {
    url += `&type=${type}`;
  }
  if (annee) {
    url += `&y=${annee}`;
  }

  fetch(url)
    .then((res) => res.json())
    .then((data) => {
      if (data.Response === "True") {
        currentData = data.Search;
        afficheCatalogue(currentData);
      } else {
        document.getElementById("catalogue").innerHTML = "<p>Aucun r√©sultat trouv√©</p>";
        document.getElementById("pagination").innerHTML = "";
      }
    })
    .catch((err) => console.error("Erreur API :", err));
}

// Gestion des clics menu
document.getElementById("Accueil").addEventListener("click", (e) => {
  e.preventDefault();
  document.getElementById("modal").style.display = "none";
  document.getElementById("modal").innerHTML = "";
  champRecherche.value = "";
  afficheAccueil();
});

document.getElementById("Series").addEventListener("click", (e) => {
  e.preventDefault();
  currentData = dataSeries;
  pageActuelle = 1;
  afficheCatalogue(dataSeries);
});

document.getElementById("Films").addEventListener("click", (e) => {
  e.preventDefault();
  currentData = dataFilms;
  pageActuelle = 1;
  afficheCatalogue(dataFilms);
});

// Initialisation
afficheAccueil();
